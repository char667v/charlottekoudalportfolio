---

---

<section>
  <h3 class="font-poppins flex justify-center pt-24 hidden md:flex">
  LET'S PLAY CARDS
</h3>

  <div class="flex flex-wrap justify-center gap-4 mx-auto max-w-screen-xl px-4 lg:px-16" id="cardContainer">
    <div class="relative w-full max-w-[600px] h-[385px] flex flex-col justify-center rounded-3xl overflow-hidden pt-20 draggable-card" id="card1">
      <div class="hover08 rounded-lg overflow-hidden shadow-lg shadow-accent max-w-sm mx-auto relative">
        <figure class="relative">
          <img src="https://picsum.photos/300/200?image=1024" alt="Description" class="w-full h-auto object-cover grayscale transition duration-300 ease-in-out hover:grayscale-0">
        </figure>
      </div>
    </div>

    <div class="hover08 rounded-lg overflow-hidden shadow-lg shadow-accent max-w-sm mx-auto relative draggable-card" id="card2">
      <figure class="relative">
        <img src="img/geranimo-wYy3rvvgjAU-unsplash.jpg" alt="Description" class="w-full h-auto object-cover grayscale transition duration-300 ease-in-out hover:grayscale-0">
      </figure>
    </div>

    <div class="hover08 rounded-lg overflow-hidden shadow-lg shadow-accent max-w-sm mx-auto relative draggable-card" id="card3">
      <figure class="relative">
        <img src="img/geranimo-wYy3rvvgjAU-unsplash.jpg" alt="Description" class="w-full h-auto object-cover grayscale transition duration-300 ease-in-out hover:grayscale-0">
      </figure>
    </div>
  </div>

  <div class="flex flex-wrap justify-center gap-4 mx-auto max-w-screen-xl px-4 lg:px-16 pt-8" id="cardContainer2">
    <div class="relative w-full max-w-[600px] h-[485px] flex flex-col justify-center rounded-3xl overflow-hidden pt-20 draggable-card" id="card4">
      <div class="hover08 rounded-lg overflow-hidden shadow-lg shadow-accent max-w-sm mx-auto relative">
        <figure class="relative">
          <img src="img/geranimo-wYy3rvvgjAU-unsplash.jpg" alt="Description" class="w-full h-auto object-cover grayscale transition duration-300 ease-in-out hover:grayscale-0">
        </figure>
      </div>
    </div>

    <div class="hover08 rounded-lg overflow-hidden shadow-lg shadow-accent max-w-sm mx-auto relative draggable-card" id="card5">
      <figure class="relative">
        <img src="img/geranimo-wYy3rvvgjAU-unsplash.jpg" alt="Description" class="w-full h-auto object-cover grayscale transition duration-300 ease-in-out hover:grayscale-0">
      </figure>
    </div>

    <div class="relative w-full max-w-[600px] h-[385px] flex flex-col justify-center rounded-3xl overflow-hidden pt-20 draggable-card" id="card6">
      <div class="hover08 rounded-lg overflow-hidden shadow-lg shadow-accent max-w-sm mx-auto relative">
        <figure class="relative">
          <img src="img/geranimo-wYy3rvvgjAU-unsplash.jpg" alt="Description" class="w-full h-auto object-cover grayscale transition duration-300 ease-in-out hover:grayscale-0">
        </figure>
      </div>
    </div>
  </div>
</section>

<style>
  .draggable-card {
    transition: transform 0.3s ease, opacity 0.3s ease;
    cursor: pointer; /* Show pointer cursor for draggable items */
  }

  .draggable-card.dragging {
    opacity: 0.5; /* Reduce opacity when dragging */
    transform: scale(1.05); /* Slightly enlarge the card while dragging */
    position: absolute; /* Position it absolutely while dragging */
    z-index: 1000; /* Ensure it appears on top */
  }
</style>

<script>
/*   document.addEventListener('DOMContentLoaded', () => {
    const cards = document.querySelectorAll('.draggable-card');
    let draggedCard = null;
    let offsetX = 0;
    let offsetY = 0;

    // Enable drag-and-drop functionality only on desktop (screen width > 768px)
    if (window.innerWidth > 768) {
      cards.forEach(card => {
        card.addEventListener('mousedown', function (e) {
          draggedCard = this;
          offsetX = e.clientX - this.getBoundingClientRect().left;
          offsetY = e.clientY - this.getBoundingClientRect().top;

          this.classList.add('dragging');
          
          const mouseMoveHandler = (event) => {
            this.style.position = 'absolute';
            this.style.top = (event.clientY - offsetY) + 'px';
            this.style.left = (event.clientX - offsetX) + 'px';
          };

          const mouseUpHandler = (event) => {
            this.classList.remove('dragging');
            document.removeEventListener('mousemove', mouseMoveHandler);
            document.removeEventListener('mouseup', mouseUpHandler);
            
            const targetCard = document.elementFromPoint(event.clientX, event.clientY);
            if (targetCard && targetCard !== draggedCard && targetCard.classList.contains('draggable-card')) {
              const parent = draggedCard.parentNode;
              parent.insertBefore(draggedCard, targetCard);
            }

            // Reset styles
            this.style.position = '';
            this.style.top = '';
            this.style.left = '';
          };

          document.addEventListener('mousemove', mouseMoveHandler);
          document.addEventListener('mouseup', mouseUpHandler);
        });
      });
    }
  }); */
</script>
