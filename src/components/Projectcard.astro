---

---
<section>
  <div class="flex flex-wrap justify-center gap-4 mx-auto max-w-screen-xl px-4 lg:px-16" id="cardContainer">
    <div class="relative w-full max-w-[600px] h-[385px] flex flex-col justify-center rounded-3xl overflow-hidden pt-20 draggable-card" id="card1">
      <div class="hover08 rounded-lg overflow-hidden shadow-lg shadow-accent max-w-sm mx-auto relative">
        <figure class="relative">
          <img src="img/animation.png" alt="Description" class="w-full h-auto object-cover grayscale transition duration-300 ease-in-out hover:grayscale-0">
        </figure>
      </div>
    </div>

    <div class="hover08 rounded-lg overflow-hidden shadow-lg shadow-accent max-w-sm mx-auto relative draggable-card" id="card2">
      <figure class="relative">
        <img src="img/atk.png" alt="Description" class="max-w-screen-md h-auto justify-center object-cover grayscale transition duration-300 ease-in-out hover:grayscale-0">
      </figure>
    </div>

    <div class="flex flex-wrap justify-center gap-4 mx-auto max-w-screen-xl px-4 lg:px-16 pt-8" id="cardContainer2">
      <div class="relative w-full max-w-[600px] h-[485px] flex flex-col justify-center rounded-3xl overflow-hidden pt-20 draggable-card" id="card4">
        <div class="hover08 rounded-lg overflow-hidden shadow-lg shadow-accent max-w-sm mx-auto relative">
          <figure class="relative">
            <img src="img/dcd.png" alt="Description" class="w-full h-auto object-cover grayscale transition duration-300 ease-in-out hover:grayscale-0">
          </figure>
        </div>
      </div>

    <div class="flex flex-wrap justify-center gap-4 mx-auto max-w-screen-xl px-4 lg:px-16 pt-8" id="cardContainer2">
      <div class="relative w-full max-w-[600px] h-[485px] flex flex-col justify-center rounded-3xl overflow-hidden pt-20 draggable-card" id="card4">
        <div class="hover08 rounded-lg overflow-hidden shadow-lg shadow-accent max-w-sm mx-auto relative">
          <figure class="relative">
            <img src="img/dcd.png" alt="Description" class="w-full h-auto object-cover grayscale transition duration-300 ease-in-out hover:grayscale-0">
          </figure>
        </div>
      </div>

      <div class="hover08 rounded-lg overflow-hidden shadow-lg shadow-accent max-w-sm mx-auto relative draggable-card" id="card5">
        <figure class="relative">
          <img src="img/itmv.png" alt="Description" class="max-w-screen-lg h-auto justify-center object-cover grayscale transition duration-300 ease-in-out hover:grayscale-0">
        </figure>
      </div>

      <div class="relative w-full max-w-[600px] h-[385px] flex flex-col justify-center rounded-3xl overflow-hidden pt-20 draggable-card" id="card6">
        <div class="hover08 rounded-lg overflow-hidden shadow-lg shadow-accent max-w-sm mx-auto relative">
          <figure class="relative">
            <img src="img/portfolio.png" alt="Description" class="w-full h-auto object-cover grayscale transition duration-300 ease-in-out hover:grayscale-0">
          </figure>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .draggable-card {
    transition: transform 0.3s ease, opacity 0.3s ease;
    cursor: pointer; /* Show pointer cursor for draggable items */
  }

  .draggable-card.dragging {
    opacity: 0.5; /* Reduce opacity when dragging */
    transform: scale(1.05); /* Slightly enlarge the card while dragging */
    position: absolute; /* Position it absolutely while dragging */
    z-index: 1000; /* Ensure it appears on top */
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const cards = document.querySelectorAll('.draggable-card');
    let draggedCard = null;

    cards.forEach(card => {
      card.setAttribute('draggable', 'true'); // Make them draggable

      card.addEventListener('dragstart', function () {
        draggedCard = this;
        setTimeout(() => {
          this.style.display = 'none'; // Temporarily hide the dragged item
        }, 0);
      });

      card.addEventListener('dragend', function () {
        setTimeout(() => {
          this.style.display = 'block'; // Show the dragged item again
          draggedCard = null;
        }, 0);
      });
    });

    // Allow cards to be dropped into the container
    const container = document.getElementById('cardContainer');
    
    // Ensure that the container is defined before adding event listeners
    if (container) {
      container.addEventListener('dragover', function (e) {
        e.preventDefault(); // Prevent default behavior to allow dropping
      });

      container.addEventListener('drop', function (e) {
        e.preventDefault(); // Prevent default behavior

        if (draggedCard) {
          const targetCard = (e.target as Element).closest('.draggable-card');
          if (targetCard && targetCard !== draggedCard) {
            this.insertBefore(draggedCard, targetCard); // Insert the dragged card before the target card
          }
        }
      });
    }
  });
</script>
